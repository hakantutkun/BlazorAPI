@page "/authors/details/{id:int}"
@inject IAuthorService authorService;
@inject NavigationManager navManager;

<h3>Author Details</h3>

<EditForm Model="Author">
    <fieldset disabled="true">
        <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText class="form-control" @bind-Value="Author.FirstName" id="firstname" />
        <ValidationMessage For="@(()=> Author.FirstName)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText class="form-control" @bind-Value="Author.LastName" id="lastname" />
        <ValidationMessage For="@(()=> Author.LastName)" />
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea class="form-control" @bind-Value="Author.Bio" id="bio" />
        <ValidationMessage For="@(()=> Author.Bio)" />
    </div>
    </fieldset>

    @if(Author.Books == null || Author.Books.Any() == false)
    {
        <div class="alert alert-dissmissible alert-secondary">
            No Books for this Author
        </div>
    }
    else
    {
        foreach (var book in Author.Books)
        {
            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src="@book.Image" alt="@book.Title">
                <div class="card-body">
                    <h5 class="card-title">@book.Title - @book.Price.ToString("C")</h5>
                    <p class="card-text"></p>
                    <a href="#" class="btn btn-primary">View Book</a>
                </div>
            </div>
        }
    }
    <button @onclick="GoToEdit" class="btn btn-warning">
        <span class="oi oi-pencil"></span>
        Edit
    </button>

    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    private AuthorDetailsDto Author = new AuthorDetailsDto();

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetAuthor(id);

        if (response.Success)
        {
            Author = response.Data;
        }

    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }

    private void GoToEdit()
    {
        navManager.NavigateTo($"/authors/update/{Author.Id}");
    }
}
